<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recommend a Policy</title>
    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#667eea">
    <link rel="apple-touch-icon" href="/icons/icon-192x192.png">

    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(90deg, #6733c6, #f757a7);
            min-height: 100vh;
            overflow-x: hidden;
        }

        /* ===== IMPROVED HEADER ===== */
        .header {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
            transition: all 0.3s ease;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-section {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .welcome-text {
            color: white;
            font-weight: 600;
            font-size: 1.1rem;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
        }

        .logo {
            font-size: 1.8rem;
            font-weight: 700;
            color: white;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .logout-btn {
            background: rgba(255, 255, 255, 0.15);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.25);
            padding: 0.6rem 1.2rem;
            border-radius: 25px;
            text-decoration: none;
            font-weight: 500;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .logout-btn:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        /* ===== MAIN CONTAINER ===== */
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            min-height: calc(100vh - 100px);
            align-items: start;
        }

        /* ===== LEFT PANEL - RECOMMENDATION UI ===== */
        .recommend-box {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            height: fit-content;
            min-height: 600px;
        }

        .recommend-box h1 {
            color: white;
            font-size: 2rem;
            font-weight: 700;
            text-align: center;
            margin-bottom: 1rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .recommend-box h2 {
            color: white;
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1rem;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
        }

        /* Textarea Styling */
        #userInput {
            width: 100%;
            min-height: 120px;
            padding: 1rem;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 15px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            color: white;
            font-size: 1rem;
            resize: vertical;
            transition: all 0.3s ease;
        }

        #userInput::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        #userInput:focus {
            outline: none;
            border-color: rgba(255, 255, 255, 0.5);
            background: rgba(255, 255, 255, 0.15);
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.2);
        }

        /* Button Styling */
        #getRecommendationsBtn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 25px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        #getRecommendationsBtn:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.4);
            background: linear-gradient(135deg, #5a6fd8, #6b4190);
        }

        #getRecommendationsBtn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }

        /* Loading Animation */
        .loading {
            width: 16px;
            height: 16px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Recommendations Section */
        #recommendations {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 1.5rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        #policyList {
            list-style: none;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        /* Policy Item Styling */
        .policy-item {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 1.5rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }

        .policy-item:hover {
            background: rgba(255, 255, 255, 0.15);
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .policy-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .policy-header input[type="radio"] {
            width: 20px;
            height: 20px;
            accent-color: #667eea;
            cursor: pointer;
        }

        .policy-name {
            color: white;
            font-size: 1.2rem;
            font-weight: 600;
            cursor: pointer;
            flex: 1;
        }

        .policy-why-container {
            margin-left: 2rem;
        }

        .policy-why-heading {
            color: rgba(255, 255, 255, 0.9);
            font-size: 1rem;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .policy-description {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.95rem;
            line-height: 1.5;
        }

        /* Action Buttons */
        .action-buttons {
            display: flex;
            gap: 1rem;
            margin-top: 1.5rem;
            justify-content: center;
        }

        .accept-btn,
        .decline-btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 25px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            min-width: 150px;
        }

        .accept-btn {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            box-shadow: 0 8px 25px rgba(76, 175, 80, 0.3);
        }

        .accept-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 35px rgba(76, 175, 80, 0.4);
            background: linear-gradient(135deg, #45a049, #3d8b40);
        }

        .decline-btn {
            background: linear-gradient(135deg, #f44336, #d32f2f);
            color: white;
            box-shadow: 0 8px 25px rgba(244, 67, 54, 0.3);
        }

        .decline-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 35px rgba(244, 67, 54, 0.4);
            background: linear-gradient(135deg, #d32f2f, #b71c1c);
        }

        .accept-btn:disabled,
        .decline-btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }

        /* ===== MESSAGE CONTAINER - ENHANCED VISIBILITY ===== */
        #messageContainer {
            margin-top: 1rem;
            z-index: 10;
            position: relative;
        }

        .message {
            padding: 1.2rem;
            border-radius: 15px;
            font-weight: 700;
            font-size: 1.1rem;
            text-align: center;
            animation: fadeInUp 0.3s ease;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
            border: 2px solid;
        }

        .message.success {
            background: rgba(76, 175, 80, 0.9);
            border-color: #4CAF50;
            color: #ffffff;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        }

        .message.error {
            background: rgba(244, 67, 54, 0.9);
            border-color: #f44336;
            color: #ffffff;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* ===== RIGHT PANEL - CHATBOT CONTAINER ===== */
        .chatbox-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            padding: 1rem;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            height: fit-content;
            min-height: 600px;
            position: sticky;
            top: 120px;
        }

        .chatbox-container iframe {
            width: 100%;
            height: 700px;
            border: none;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        /* ===== RESPONSIVE DESIGN ===== */
        @media (max-width: 1200px) {
            .container {
                grid-template-columns: 1fr;
                gap: 2rem;
            }
            
            .chatbox-container {
                position: static;
                min-height: 500px;
            }
            
            .chatbox-container iframe {
                height: 500px;
            }
        }

        @media (max-width: 768px) {
            .header-content {
                padding: 0 1rem;
            }
            
            .container {
                padding: 1rem;
                gap: 1.5rem;
            }
            
            .recommend-box {
                padding: 1.5rem;
                min-height: auto;
            }
            
            .recommend-box h1 {
                font-size: 1.5rem;
            }
            
            .action-buttons {
                flex-direction: column;
                align-items: stretch;
            }
            
            .accept-btn,
            .decline-btn {
                min-width: auto;
            }
            
            .policy-why-container {
                margin-left: 1rem;
            }
            
            .user-section {
                gap: 0.5rem;
            }
            
            .welcome-text {
                font-size: 1rem;
            }
        }

        @media (max-width: 480px) {
            .header-content {
                flex-direction: column;
                gap: 1rem;
                padding: 1rem;
            }
            
            .user-section {
                flex-wrap: wrap;
                justify-content: center;
            }
            
            .recommend-box {
                padding: 1rem;
            }
            
            .policy-item {
                padding: 1rem;
            }
            
            .policy-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }
            
            .policy-why-container {
                margin-left: 0;
            }
            
            #userInput {
                min-height: 100px;
            }
            
            .chatbox-container iframe {
                height: 400px;
            }
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-content">
            <div class="logo">
                <i class="fas fa-chart-line"></i>
                Financial AI Hub
            </div>
            <div class="user-section">
                <span class="welcome-text">Welcome, <%= username %>!</span>
                <a href="/home" class="logout-btn">
                    <i class="fas fa-home"></i> Home
                </a>
                <a href="/logout" class="logout-btn">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </a>
            </div>
        </div>
    </header>

    <div class="container">
        <!-- Left Panel: Recommendation UI -->
        <div class="recommend-box">
            <h1>Policy Recommendation</h1>
            <textarea id="userInput" placeholder="Describe your requirements..."></textarea>
            <button id="getRecommendationsBtn" onclick="getRecommendations()">Get Recommendations</button>

            <div id="recommendations" style="display: none;">
                <h2>Recommended Policies:</h2>
                <ul id="policyList"></ul>
                <div class="action-buttons" style="display: none;" id="actionButtons">
                    <button class="accept-btn" id="acceptBtn" onclick="acceptPolicy()">Accept Policy</button>
                    <button class="decline-btn" id="declineBtn" onclick="declinePolicy()">Decline Policy</button>
                </div>
            </div>

            <div id="messageContainer"></div>
        </div>

        <!-- Right Panel: Chatbot -->
        <div class="chatbox-container">
            <iframe
                src="https://www.chatbase.co/chatbot-iframe/N7ypLB_KMEig3ZTsuFH3G"
                title="Chatbot"
            ></iframe>
        </div>
    </div>

    <script>
        let selectedPolicy = null;

        async function getRecommendations() {
            const userInput = document.getElementById("userInput").value;
            const getRecommendationsBtn = document.getElementById("getRecommendationsBtn");
            
            if (!userInput.trim()) {
                showMessage("Please enter a description.", "error");
                return;
            }

            // Show loading state
            getRecommendationsBtn.disabled = true;
            getRecommendationsBtn.innerHTML = '<span class="loading"></span>Getting Recommendations...';

            try {
                const res = await fetch('/api/recommend', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ description: userInput })
                });

                const responseData = await res.json();
                
                if (!res.ok) {
                    throw new Error(responseData.error || `HTTP error! status: ${res.status}`);
                }

                console.log('Response data:', responseData);
                
                // Handle multiple possible response structures
                let policies = [];
                
                if (responseData.policies && Array.isArray(responseData.policies)) {
                    policies = responseData.policies;
                } else if (responseData.recommendation) {
                    if (Array.isArray(responseData.recommendation)) {
                        policies = responseData.recommendation;
                    } else {
                        policies = [responseData.recommendation];
                    }
                } else if (responseData.name) {
                    policies = [responseData];
                } else if (Array.isArray(responseData)) {
                    policies = responseData;
                } else {
                    console.error('Unexpected response format:', responseData);
                    throw new Error('Unexpected response format from server');
                }
                
                console.log('Processed policies:', policies);
                
                if (policies && policies.length > 0) {
                    displayRecommendations(policies);
                } else {
                    showMessage("No policies found for your requirements. Please try with different criteria.", "error");
                }
                
            } catch (error) {
                console.error('Error fetching recommendations:', error);
                showMessage(`Error: ${error.message}`, "error");
            } finally {
                getRecommendationsBtn.disabled = false;
                getRecommendationsBtn.innerHTML = 'Get Recommendations';
            }
        }

        function displayRecommendations(policies) {
            const policyList = document.getElementById("policyList");
            const recommendationsDiv = document.getElementById("recommendations");
            const actionButtons = document.getElementById("actionButtons");
            
            policyList.innerHTML = "";
            recommendationsDiv.style.display = "block";
            
            policies.forEach((policy, index) => {
                const policyName = policy.name || policy;
                const policyWhy = policy.why || policy.description || 'No description available';
                
                const listItem = document.createElement("li");
                listItem.innerHTML = `
                    <div class="policy-item">
                        <div class="policy-header">
                            <input type="radio" name="selectedPolicy" value="${policyName}" id="policy_${index}" onchange="selectPolicy('${policyName}')">
                            <label for="policy_${index}" class="policy-name">${policyName}</label>
                        </div>
                        <div class="policy-why-container">
                            <h3 class="policy-why-heading">Why choose this policy:</h3>
                            <div class="policy-description">${policyWhy}</div>
                        </div>
                    </div>
                `;
                policyList.appendChild(listItem);
            });

            actionButtons.style.display = "flex";
        }

        function selectPolicy(policyName) {
            selectedPolicy = policyName;
            console.log('Selected policy:', selectedPolicy);
        }

        async function acceptPolicy() {
            if (!selectedPolicy) {
                showMessage("Please select a policy first.", "error");
                return;
            }

            const acceptBtn = document.getElementById("acceptBtn");
            acceptBtn.disabled = true;
            acceptBtn.innerHTML = '<span class="loading"></span>Processing...';

            try {
                const res = await fetch('/api/accept-policy', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ policy: selectedPolicy })
                });

                const result = await res.json();

                if (res.ok) {
                    showMessage(result.message || "Policy accepted successfully!", "success");
                    
                    // Redirect to upselling page after a short delay
                    setTimeout(() => {
                        if (result.redirect) {
                            window.location.href = result.redirect;
                        }
                    }, 3000);
                } else {
                    throw new Error(result.error || 'Failed to accept policy');
                }

            } catch (error) {
                console.error('Error accepting policy:', error);
                showMessage("Error accepting policy. Please try again.", "error");
            } finally {
                acceptBtn.disabled = false;
                acceptBtn.innerHTML = 'Accept Policy';
            }
        }

        async function declinePolicy() {
            const declineBtn = document.getElementById("declineBtn");
            declineBtn.disabled = true;
            declineBtn.innerHTML = '<span class="loading"></span>Processing...';

            try {
                const res = await fetch('/api/decline-policy', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ policy: selectedPolicy })
                });

                const result = await res.json();

                if (res.ok) {
                    showMessage(result.message || "Policy declined. Feel free to try again with different requirements.", "success");
                    
                    // Reset the form
                    setTimeout(() => {
                        document.getElementById("recommendations").style.display = "none";
                        document.getElementById("userInput").value = "";
                        selectedPolicy = null;
                        clearMessage();
                    }, 3000);
                    
                } else {
                    throw new Error(result.error || 'Failed to decline policy');
                }

            } catch (error) {
                console.error('Error declining policy:', error);
                showMessage("Error processing decline. Please try again.", "error");
            } finally {
                declineBtn.disabled = false;
                declineBtn.innerHTML = 'Decline Policy';
            }
        }

        function showMessage(message, type) {
            const messageContainer = document.getElementById("messageContainer");
            messageContainer.innerHTML = `<div class="message ${type}">${message}</div>`;
            
            // Scroll to message for better visibility
            messageContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }

        function clearMessage() {
            const messageContainer = document.getElementById("messageContainer");
            messageContainer.innerHTML = '';
        }
    </script>
</body>
</html>
