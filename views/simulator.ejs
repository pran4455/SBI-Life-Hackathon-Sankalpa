<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Life Stage Financial Simulator</title>
  <!-- Updated CSS styles for simulator.html -->
  <style>
      /* ===== CORE LAYOUT & VARIABLES ===== */
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --primary-color: #667eea;
            --secondary-color: #764ba2;
            --background-light: #f8fafc;
            --background-white: #ffffff;
            --border-light: #e2e8f0;
            --text-primary: #2d3748;
            --text-secondary: #64748b;
            --text-muted: #94a3b8;
            --shadow-light: 0 2px 10px rgba(0, 0, 0, 0.1);
            --shadow-medium: 0 10px 30px rgba(102, 126, 234, 0.3);
            --shadow-heavy: 0 20px 60px rgba(0, 0, 0, 0.1);
            --border-radius: 20px;
            --border-radius-small: 12px;
            --transition: all 0.3s ease;
        }

        * {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--primary-gradient);
            min-height: 100vh;
            line-height: 1.6;
        }

        /* ===== IMPROVED HEADER ===== */
        .header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            padding: 1rem 2rem;
            position: sticky;
            top: 0;
            z-index: 100;
            transition: var(--transition);
        }

        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-section {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .welcome-text {
            color: white;
            font-weight: 500;
            font-size: 1.15rem;
            margin-right: 20px;
            margin-bottom: 2px;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: 700;
            color: white;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .logout-btn {
            background: rgba(255, 255, 255, 0.15);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.25);
            padding: 0.6rem 1.2rem;
            border-radius: 25px;
            text-decoration: none;
            font-weight: 500;
            font-size: 0.9rem;
            transition: var(--transition);
            backdrop-filter: blur(10px);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .logout-btn:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        /* ===== FIXED CONTAINER & LAYOUT ===== */
        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 0 20px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 18px;
            box-shadow: var(--shadow-heavy);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            min-height: calc(100vh - 120px);
        }

        .chatbot-header {
            text-align: center;
            margin-top: 12px;
            margin-bottom: 12px;
            padding: 15px;
            background: var(--primary-gradient);
            border-radius: 15px;
            color: white;
            box-shadow: var(--shadow-medium);
            position: relative;
            overflow: hidden;
        }

        .chatbot-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, transparent 50%);
            pointer-events: none;
        }

        .chatbot-header h1 {
            margin: 0 0 1px 0;
            font-size: 1rem;
            font-weight: 700;
            position: relative;
            z-index: 1;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .chatbot-header .subtitle {
            margin: 0;
            font-size: 0.7rem;
            opacity: 1;
            font-weight: 500;
            line-height: 1.4;
            max-width: 500px;
            margin: 0 auto;
            position: relative;
            z-index: 1;
        }

        /* ===== ENHANCED CONTROLS SECTION ===== */
        .controls {
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 1rem;
            flex-wrap: wrap;
            background: white;
            border: 1px solid #e2e8f0;
            padding: 15px;
            border-radius: 12px;
            box-shadow: var(--shadow-light);
            transition: all 0.3s ease;
        }

        .controls:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-medium);
        }

        .input-group {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 8px;
            transition: all 0.3s ease;
        }

        .input-group label {
            font-weight: 600;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 0.8rem;
            min-width: 100px;
        }

        .input-group label i {
            color: var(--primary-color);
            font-size: 0.75rem;
        }

        .input-group input {
            padding: 8px 12px;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
            background: white;
            width: 120px;
            font-size: 12px;
            color: var(--text-primary);
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .input-group input:hover {
            border-color: var(--primary-color);
        }

        .input-group input:focus {
            border-color: var(--primary-color);
            outline: none;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.1);
        }

        .button {
            background: var(--primary-gradient);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 18px;
            cursor: pointer;
            font-weight: 600;
            font-size: 12px;
            transition: all 0.3s ease;
            box-shadow: var(--shadow-light);
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .button:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-medium);
        }

        .reset-button {
            background: linear-gradient(135deg, #64748b 0%, #475569 100%);
            box-shadow: var(--shadow-light);
        }

        .reset-button:hover {
            box-shadow: var(--shadow-medium);
        }

        /* ===== IMPROVED DRAG POOLS ===== */
        .drag-pools {
            display: flex;
            justify-content: space-between;
            gap: 15px;
            margin-bottom: 20px;
        }

        .pool {
            background: white;
            border: 1px solid #e2e8f0;
            padding: 15px;
            border-radius: 12px;
            box-shadow: var(--shadow-light);
            flex: 1;
            min-height: 280px;
            transition: all 0.3s ease;
        }

        .pool:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow-medium);
        }

        .pool h3 {
            margin-top: 0;
            color: var(--text-primary);
            padding-bottom: 10px;
            border-bottom: 1px solid #e2e8f0;
            font-size: 1rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .pool h3 i {
            font-size: 0.9rem;
            color: var(--primary-color);
        }

        .negative-pool h3 i {
            color: #ef4444;
        }

        .positive-pool h3 i {
            color: #10b981;
        }

        .item {
            padding: 10px 12px;
            margin: 8px 0;
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            cursor: grab;
            font-size: 12px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
            color: var(--text-primary);
            font-weight: 500;
        }

        .item:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-light);
            background: white;
        }

        .item:active {
            cursor: grabbing;
            transform: scale(0.98);
        }

        .item.negative:hover {
            border-color: #ef4444;
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.15);
        }

        .item.positive:hover {
            border-color: #10b981;
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.15);
        }

        .item-cost, .item-return {
            font-size: 10px;
            padding: 3px 8px;
            border-radius: 6px;
            font-weight: 600;
        }

        .item-cost {
            background: #fee2e2;
            border: 1px solid #fecaca;
            color: #dc2626;
        }

        .item-return {
            background: #d1fae5;
            border: 1px solid #a7f3d0;
            color: #059669;
        }

        /* ===== IMPROVED TIMELINE SECTION ===== */
        .timeline-section {
            margin-bottom: 20px;
        }

        .timeline-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            padding: 12px 20px;
            box-shadow: var(--shadow-light);
        }

        .timeline-title {
            font-size: 1.1rem;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 8px;
            margin: 0;
            font-weight: 600;
        }

        .timeline-title i {
            color: var(--primary-color);
            font-size: 1rem;
        }

        #timelineInfo {
            color: var(--text-secondary);
            font-size: 11px;
            font-weight: 500;
        }

        .timeline-container {
            overflow-x: auto;
            white-space: nowrap;
            padding: 15px;
            border-radius: 12px;
            background: white;
            border: 1px solid #e2e8f0;
            box-shadow: var(--shadow-light);
            min-height: 200px;
            scrollbar-width: thin;
            scrollbar-color: var(--primary-color) #f1f5f9;
        }

        .timeline-container::-webkit-scrollbar {
            height: 6px;
        }

        .timeline-container::-webkit-scrollbar-track {
            background: #f1f5f9;
            border-radius: 3px;
        }

        .timeline-container::-webkit-scrollbar-thumb {
            background: var(--primary-color);
            border-radius: 3px;
        }

        .year-block {
            display: inline-block;
            width: 140px;
            height: 160px;
            margin-right: 12px;
            background: #f8fafc;
            vertical-align: top;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            padding: 10px;
            box-sizing: border-box;
            transition: all 0.3s ease;
            overflow-y: auto;
            scrollbar-width: thin;
        }

        .year-block:hover {
            background: white;
            transform: translateY(-3px);
            box-shadow: var(--shadow-light);
            border-color: var(--primary-color);
        }

        .year-label {
            font-weight: 700;
            font-size: 12px;
            margin-bottom: 8px;
            color: var(--text-primary);
            text-align: center;
            padding-bottom: 6px;
            border-bottom: 1px dashed #e2e8f0;
        }

        .dropped-item {
            background: white;
            margin-top: 6px;
            padding: 6px 8px;
            border-radius: 6px;
            font-size: 10px;
            border: 1px solid #e2e8f0;
            transition: all 0.3s ease;
            cursor: grab;
            display: flex;
            justify-content: space-between;
            align-items: center;
            word-break: break-word;
            white-space: normal;
            color: var(--text-primary);
            font-weight: 500;
        }

        .dropped-item:hover {
            background: #f8fafc;
            transform: translateY(-1px);
            box-shadow: var(--shadow-light);
        }

        .remove-item {
            font-size: 10px;
            color: #64748b;
            cursor: pointer;
            padding: 2px 4px;
            border-radius: 3px;
            visibility: hidden;
            transition: all 0.2s;
            font-weight: 600;
        }

        .dropped-item:hover .remove-item {
            visibility: visible;
        }

        .remove-item:hover {
            color: #ef4444;
            background: #fee2e2;
        }

        /* ===== ENHANCED METRICS ===== */
        .metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .metric-card {
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 15px;
            box-shadow: var(--shadow-light);
            transition: all 0.3s ease;
        }

        .metric-card:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow-medium);
        }

        .metric-title {
            font-size: 0.9rem;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .metric-title i {
            color: var(--primary-color);
            font-size: 0.8rem;
        }

        .metric-value {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 15px;
            color: var(--text-primary);
            transition: all 0.3s;
        }

        .bars {
            margin-top: 12px;
        }

        .bar-label {
            margin-bottom: 6px;
            font-weight: 500;
            font-size: 11px;
            display: flex;
            justify-content: space-between;
            color: var(--text-secondary);
        }

        .bar-value {
            font-weight: 600;
            color: var(--text-primary);
        }

        .bar-container {
            height: 8px;
            background: #f1f5f9;
            width: 100%;
            border-radius: 6px;
            margin-bottom: 12px;
            overflow: hidden;
            box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
        }

        .bar {
            height: 100%;
            border-radius: 6px;
            transition: width 0.8s ease;
        }

        .savings-bar {
            background: linear-gradient(to right, #10b981, #059669);
            box-shadow: 0 0 8px rgba(16, 185, 129, 0.3);
        }

        .health-bar {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            box-shadow: 0 0 8px rgba(102, 126, 234, 0.3);
        }

        .tooltip {
            position: absolute;
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(10px);
            color: white;
            padding: 6px 10px;
            border-radius: 6px;
            font-size: 10px;
            z-index: 100;
            opacity: 0;
            transition: opacity 0.3s;
            pointer-events: none;
            box-shadow: var(--shadow-light);
            max-width: 180px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(20px);
            color: white;
            padding: 10px 18px;
            border-radius: 8px;
            font-size: 12px;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.4s ease;
            z-index: 1000;
            box-shadow: var(--shadow-medium);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-left: 3px solid var(--primary-color);
        }

        .notification.show {
            opacity: 1;
            transform: translateY(0);
        }

        @keyframes fadeInUp {
            from { 
                opacity: 0; 
                transform: translateY(20px); 
            }
            to { 
                opacity: 1; 
                transform: translateY(0); 
            }
        }

        .section {
            margin-bottom: 20px;
            animation: fadeInUp 0.6s ease;
        }

        @media (max-width: 768px) {
            .container {
                margin: 15px;
                padding: 15px;
            }

            .drag-pools {
                flex-direction: column;
            }
            
            .metrics {
                grid-template-columns: 1fr;
            }
            
            .controls {
                flex-direction: column;
                align-items: stretch;
                gap: 12px;
            }
            
            .input-group {
                justify-content: center;
            }
            
            .button {
                width: 100%;
                justify-content: center;
            }
            
            .chatbot-header h1 {
                font-size: 0.9rem;
            }
            
            .chatbot-header .subtitle {
                font-size: 0.65rem;
            }

            .timeline-header {
                flex-direction: column;
                gap: 10px;
                text-align: center;
            }

            .year-block {
                width: 120px;
                height: 140px;
            }
        }

        @media (max-width: 480px) {
            .year-block {
                width: 110px;
                height: 130px;
            }
            
            .metric-value {
                font-size: 1.5rem;
            }

            .container {
                margin: 8px;
                padding: 12px;
            }

            .pool {
                min-height: 200px;
            }
        }
  </style>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
  <header class="header">
        <div class="header-content">
            <div class="logo">
                <i class="fas fa-chart-line"></i>
                Financial AI Hub
            </div>
            <div class="user-section">
                <span class="welcome-text">Welcome, <%= username %>!</span>
                <a href="/games" class="logout-btn">
                    <i class="fas fa-gamepad"></i> Games
                </a>
                <a href="/logout" class="logout-btn">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </a>
            </div>
        </div>
  </header>

  <div class="container">
    <div class="chatbot-header">
      <h1>Life Stage Financial Simulator</h1>
      <p class="subtitle">Plan your financial journey and visualize how different life events impact your finances</p>
    </div>

    <div class="section controls">
      <div class="input-group">
        <label><i class="fas fa-rupee-sign"></i> Current Savings:</label>
        <input type="number" id="savingsInput" value="500000" min="10000" />
      </div>
      <div class="input-group">
        <label><i class="fas fa-calendar-alt"></i> Years to Simulate:</label>
        <input type="number" id="yearsInput" value="10" min="1" max="40" />
      </div>
      <div class="input-group">
        <label><i class="fas fa-money-bill"></i> Annual Income:</label>
        <input type="number" id="incomeInput" value="800000" min="0" />
      </div>
      <button class="button" onclick="generateTimeline()"><i class="fas fa-play"></i> Generate Timeline</button>
      <button class="button reset-button" onclick="resetSimulation()"><i class="fas fa-redo"></i> Reset</button>
    </div>

    <div class="section drag-pools">
      <div class="pool negative-pool">
        <h3><i class="fas fa-exclamation-circle"></i> Life Events (Expenses)</h3>
        <div class="item negative" draggable="true" data-cost="300000" data-type="expense">
          <span>Marriage</span>
          <span class="item-cost">₹3,00,000</span>
        </div>
        <div class="item negative" draggable="true" data-cost="500000" data-type="expense">
          <span>Higher Education</span>
          <span class="item-cost">₹5,00,000</span>
        </div>
        <div class="item negative" draggable="true" data-cost="1500000" data-type="expense">
          <span>Buy a House</span>
          <span class="item-cost">₹15,00,000</span>
        </div>
        <div class="item negative" draggable="true" data-cost="700000" data-type="expense">
          <span>Buy a Car</span>
          <span class="item-cost">₹7,00,000</span>
        </div>
        <div class="item negative" draggable="true" data-cost="200000" data-type="expense">
          <span>Major Health Expense</span>
          <span class="item-cost">₹2,00,000</span>
        </div>
        <div class="item negative" draggable="true" data-cost="150000" data-type="expense">
          <span>Family Vacation</span>
          <span class="item-cost">₹1,50,000</span>
        </div>
        <div class="item negative" draggable="true" data-cost="100000" data-type="expense">
          <span>Home Renovation</span>
          <span class="item-cost">₹1,00,000</span>
        </div>
      </div>
      <div class="pool positive-pool">
        <h3><i class="fas fa-piggy-bank"></i> SBI Investment Options</h3>
        <div class="item positive" draggable="true" data-return="7.1" data-type="investment">
          <span>SBI PPF</span>
          <span class="item-return">7.1% p.a.</span>
        </div>
        <div class="item positive" draggable="true" data-return="5.8" data-type="investment">
          <span>SBI Fixed Deposit</span>
          <span class="item-return">5.8% p.a.</span>
        </div>
        <div class="item positive" draggable="true" data-return="9.5" data-type="investment">
          <span>SBI Retirement Plan</span>
          <span class="item-return">9.5% p.a.</span>
        </div>
        <div class="item positive" draggable="true" data-return="10.2" data-type="investment">
          <span>SBI Equity Fund</span>
          <span class="item-return">10.2% p.a.</span>
        </div>
        <div class="item positive" draggable="true" data-return="8.7" data-type="investment">
          <span>SBI Balanced Fund</span>
          <span class="item-return">8.7% p.a.</span>
        </div>
        <div class="item positive" draggable="true" data-return="7.5" data-type="investment">
          <span>SBI Tax Saver Fund</span>
          <span class="item-return">7.5% p.a.</span>
        </div>
        <div class="item positive" draggable="true" data-return="6.4" data-type="investment">
          <span>SBI Recurring Deposit</span>
          <span class="item-return">6.4% p.a.</span>
        </div>
      </div>
    </div>

    <div class="section timeline-section">
      <div class="timeline-header">
        <h2 class="timeline-title"><i class="fas fa-stream"></i> Your Financial Timeline</h2>
        <div id="timelineInfo"></div>
      </div>
      <div class="timeline-container" id="timeline"></div>
    </div>

    <div class="section metrics">
      <div class="metric-card">
        <div class="metric-title"><i class="fas fa-rupee-sign"></i> Projected Savings</div>
        <div class="metric-value" id="savingsValue">₹5,00,000</div>
        <div class="bars">
          <div class="bar-label">
            <span>Growth Projection</span>
            <span class="bar-value" id="savingsPercent">100%</span>
          </div>
          <div class="bar-container">
            <div id="savingsBar" class="bar savings-bar" style="width: 100%;"></div>
          </div>
        </div>
      </div>
      
      <div class="metric-card">
        <div class="metric-title"><i class="fas fa-heart"></i> Financial Health</div>
        <div class="metric-value" id="healthValue">Excellent</div>
        <div class="bars">
          <div class="bar-label">
            <span>Health Index</span>
            <span class="bar-value" id="healthPercent">100%</span>
          </div>
          <div class="bar-container">
            <div id="healthBar" class="bar health-bar" style="width: 100%;"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div id="tooltip" class="tooltip"></div>
  <div id="notification" class="notification">
  </div>

  <script>
    // DOM Elements
    const savingsBar = document.getElementById("savingsBar");
    const healthBar = document.getElementById("healthBar");
    const savingsInput = document.getElementById("savingsInput");
    const yearsInput = document.getElementById("yearsInput");
    const incomeInput = document.getElementById("incomeInput");
    const timeline = document.getElementById("timeline");
    const savingsValue = document.getElementById("savingsValue");
    const savingsPercent = document.getElementById("savingsPercent");
    const healthValue = document.getElementById("healthValue");
    const healthPercent = document.getElementById("healthPercent");
    const timelineInfo = document.getElementById("timelineInfo");
    const tooltip = document.getElementById("tooltip");
    const notification = document.getElementById("notification");

    // Financial state tracking
    let initialSavings = parseInt(savingsInput.value);
    let currentSavings = initialSavings;
    let yearlyData = [];
    let droppedItems = new Map(); // Map to track dropped items by year
    let investmentBalances = new Map(); // Track investment balances per year

    // Initialize tooltip
    document.addEventListener('mousemove', (e) => {
      tooltip.style.left = (e.pageX + 15) + 'px';
      tooltip.style.top = (e.pageY + 15) + 'px';
    });

    function showTooltip(content) {
      tooltip.textContent = content;
      tooltip.style.opacity = 1;
    }

    function hideTooltip() {
      tooltip.style.opacity = 0;
    }

    function showNotification(message) {
      notification.textContent = message;
      notification.classList.add('show');
      setTimeout(() => {
        notification.classList.remove('show');
      }, 3000);
    }

    function formatCurrency(amount) {
      return new Intl.NumberFormat('en-IN', {
        style: 'currency',
        currency: 'INR',
        maximumFractionDigits: 0
      }).format(amount);
    }

    function generateTimeline() {
      timeline.innerHTML = "";
      initialSavings = parseInt(savingsInput.value) || 500000;
      currentSavings = initialSavings;
      yearlyData = [];
      droppedItems = new Map();
      investmentBalances = new Map();

      const years = parseInt(yearsInput.value) || 10;
      const annualIncome = parseInt(incomeInput.value) || 800000;
      
      // Initialize year data structure
      for (let i = 1; i <= years; i++) {
        yearlyData[i] = {
          startingSavings: 0,
          endingSavings: 0,
          totalExpenses: 0,
          totalReturns: 0,
          items: []
        };

        // Create year block in timeline
        const block = document.createElement("div");
        block.className = "year-block";
        block.id = `year-${i}`;
        block.innerHTML = `<div class="year-label">Year ${i}</div>`;
        
        // Set up drag event handlers
        block.ondragover = (e) => e.preventDefault();
        block.ondrop = (e) => handleDrop(e, i);
        
        timeline.appendChild(block);
        droppedItems.set(i, []);
        investmentBalances.set(i, new Map());
      }

      // Calculate initial year data (without any events)
      calculateAllYears();
      updateFinancialMetrics();
      timelineInfo.textContent = `Timeline created with ${years} years and initial savings of ${formatCurrency(initialSavings)}`;
    }

    function resetSimulation() {
      yearlyData = [];
      droppedItems = new Map();
      investmentBalances = new Map();
      generateTimeline();
      showNotification("Simulation has been reset");
    }

    // Set up drag events for items
    document.querySelectorAll(".item").forEach(item => {
      item.addEventListener("dragstart", e => {
        const itemType = e.target.dataset.type;
        const itemData = {
          text: e.target.querySelector('span').textContent,
          cost: e.target.dataset.cost || 0,
          return: e.target.dataset.return || 0,
          type: itemType,
          class: itemType === 'expense' ? 'negative' : 'positive'
        };
        e.dataTransfer.setData("text/plain", JSON.stringify(itemData));
      });

      // Show tooltip on hover
      item.addEventListener("mouseenter", e => {
        const cost = e.target.dataset.cost;
        const returnRate = e.target.dataset.return;
        let tooltipText = '';
        
        if (cost) {
          tooltipText = `This expense will reduce your savings by ${formatCurrency(parseInt(cost))}`;
        } else if (returnRate) {
          tooltipText = `Expected annual return of ${returnRate}% on your investments`;
        }
        
        showTooltip(tooltipText);
      });

      item.addEventListener("mouseleave", hideTooltip);
    });

    function handleDrop(e, year) {
      e.preventDefault();
      const data = JSON.parse(e.dataTransfer.getData("text/plain"));
      const dropZone = document.getElementById(`year-${year}`);
      const itemId = `item-${year}-${Date.now()}`;

      // Create the dropped item element
      const newItem = document.createElement("div");
      newItem.className = `dropped-item ${data.class}`;
      newItem.id = itemId;
      newItem.draggable = true;
      
      // Save original data as dataset attributes
      newItem.dataset.cost = data.cost;
      newItem.dataset.return = data.return;
      newItem.dataset.type = data.type;
      newItem.dataset.year = year;
      
      // Create item content with remove button
      newItem.innerHTML = `
        <span>${data.text}</span>
        <span class="remove-item" title="Remove item">✕</span>
      `;
      
      dropZone.appendChild(newItem);
      
      // Add to tracking
      droppedItems.get(year).push({
        id: itemId,
        text: data.text,
        cost: parseInt(data.cost) || 0,
        return: parseFloat(data.return) || 0,
        type: data.type
      });

      // Recalculate all years from this point forward
      calculateAllYears();
      updateFinancialMetrics();
      
      // Set up event handlers for the dropped item
      setupDroppedItemEvents(newItem, year, itemId);
      
      // Show notification
      if (data.type === 'expense') {
        showNotification(`Added expense: ${data.text} in Year ${year}`);
      } else {
        showNotification(`Added investment: ${data.text} in Year ${year}`);
      }
    }

    function setupDroppedItemEvents(itemElement, year, itemId) {
      // Make it draggable (for removal)
      itemElement.addEventListener("dragstart", e => {
        e.dataTransfer.setData("id", itemId);
        e.dataTransfer.setData("year", year);
      });
      
      // Set up remove button click handler
      const removeButton = itemElement.querySelector('.remove-item');
      removeButton.addEventListener('click', () => {
        removeItem(year, itemId);
      });
      
      // Tooltip for dropped items
      itemElement.addEventListener("mouseenter", e => {
        const cost = itemElement.dataset.cost;
        const returnRate = itemElement.dataset.return;
        const type = itemElement.dataset.type;
        
        let tooltipText = '';
        if (type === 'expense') {
          tooltipText = `Expense: ${formatCurrency(parseInt(cost))}`;
        } else {
          tooltipText = `Investment with ${returnRate}% annual return`;
        }
        
        showTooltip(tooltipText);
      });
      
      itemElement.addEventListener("mouseleave", hideTooltip);
    }

    function removeItem(year, itemId) {
      // Find the item in the tracking map
      const yearItems = droppedItems.get(parseInt(year));
      const itemIndex = yearItems.findIndex(item => item.id === itemId);
      
      if (itemIndex !== -1) {
        // Remove from DOM
        const itemElement = document.getElementById(itemId);
        if (itemElement) {
          itemElement.remove();
        }
        
        // Remove from tracking
        yearItems.splice(itemIndex, 1);
        
        // Recalculate all years
        calculateAllYears();
        updateFinancialMetrics();
        showNotification("Item removed from timeline");
      }
    }

    function calculateAllYears() {
      const years = parseInt(yearsInput.value) || 10;
      const annualIncome = parseInt(incomeInput.value) || 800000;
      const annualSavings = annualIncome * 0.2; // 20% savings rate
      
      // Reset investment balances
      investmentBalances = new Map();
      for (let i = 1; i <= years; i++) {
        investmentBalances.set(i, new Map());
      }
      
      for (let year = 1; year <= years; year++) {
        // Starting savings for this year
        let startingSavings = year === 1 ? initialSavings : yearlyData[year - 1].endingSavings;
        
        // Add annual savings
        let currentYearSavings = startingSavings + annualSavings;
        
        let totalExpenses = 0;
        let totalReturns = 0;
        
        // Process expenses for this year
        const yearItems = droppedItems.get(year) || [];
        yearItems.forEach(item => {
          if (item.type === 'expense') {
            totalExpenses += item.cost;
            currentYearSavings -= item.cost;
          }
        });
        
        // Calculate investment returns from all previous years
        for (let prevYear = 1; prevYear < year; prevYear++) {
          const prevYearInvestments = investmentBalances.get(prevYear);
          prevYearInvestments.forEach((balance, investmentName) => {
            // Find the return rate for this investment
            const investmentItem = droppedItems.get(prevYear).find(item => 
              item.type === 'investment' && item.text === investmentName
            );
            if (investmentItem) {
              const yearlyReturn = balance * (investmentItem.return / 100);
              totalReturns += yearlyReturn;
              currentYearSavings += yearlyReturn;
              
              // Update investment balance for compound growth
              const currentBalance = investmentBalances.get(year).get(investmentName) || 0;
              investmentBalances.get(year).set(investmentName, currentBalance + balance + yearlyReturn);
            }
          });
        }
        
        // Process new investments for this year
        yearItems.forEach(item => {
          if (item.type === 'investment') {
            // For new investments, assume we invest the available savings amount
            // or a reasonable portion of it (let's say 50% of available savings)
            const investmentAmount = Math.min(currentYearSavings * 0.5, currentYearSavings);
            if (investmentAmount > 0) {
              const currentBalance = investmentBalances.get(year).get(item.text) || 0;
              investmentBalances.get(year).set(item.text, currentBalance + investmentAmount);
              
              // Don't deduct from savings for investments (they're still your money, just invested)
              // But calculate first year return
              const firstYearReturn = investmentAmount * (item.return / 100);
              totalReturns += firstYearReturn;
              currentYearSavings += firstYearReturn;
            }
          }
        });
        
        // Ensure savings don't go negative
        const endingSavings = Math.max(0, currentYearSavings);
        
        // Update yearly data
        yearlyData[year] = {
          startingSavings: startingSavings,
          endingSavings: endingSavings,
          totalExpenses: totalExpenses,
          totalReturns: totalReturns,
          items: [...yearItems]
        };
      }
    }

    function updateFinancialMetrics() {
      const years = parseInt(yearsInput.value) || 10;
      if (years <= 0 || !yearlyData[years]) return;
      
      // Get final year savings
      const finalSavings = yearlyData[years].endingSavings;
      currentSavings = finalSavings;
      
      // Calculate percent change from initial
      const savingsChange = ((finalSavings - initialSavings) / initialSavings) * 100;
      
      // Update savings metrics
      savingsValue.textContent = formatCurrency(finalSavings);
      
      if (savingsChange >= 0) {
        savingsPercent.textContent = `+${savingsChange.toFixed(1)}%`;
        savingsPercent.style.color = "#10b981";
      } else {
        savingsPercent.textContent = `${savingsChange.toFixed(1)}%`;
        savingsPercent.style.color = "#ef4444";
      }
      
      // Calculate bar width (0-100%)
      const barWidth = Math.max(10, Math.min(100, 50 + (savingsChange / 4)));
      savingsBar.style.width = `${barWidth}%`;
      
      // Calculate financial health (0-100)
      const healthIndex = calculateHealthIndex(finalSavings, initialSavings, years);
      const healthPercCapped = Math.max(0, Math.min(healthIndex, 100));
      
      // Update health metrics
      healthBar.style.width = `${healthPercCapped}%`;
      healthPercent.textContent = `${healthPercCapped.toFixed(0)}%`;
      
      // Set health status text and color
      if (healthIndex >= 80) {
        healthValue.textContent = "Excellent";
        healthValue.style.color = "#10b981";
      } else if (healthIndex >= 60) {
        healthValue.textContent = "Good";
        healthValue.style.color = "#22c55e";
      } else if (healthIndex >= 40) {
        healthValue.textContent = "Moderate";
        healthValue.style.color = "#f59e0b";
      } else if (healthIndex >= 20) {
        healthValue.textContent = "Concerning";
        healthValue.style.color = "#f97316";
      } else {
        healthValue.textContent = "Critical";
        healthValue.style.color = "#ef4444";
      }
    }

    function calculateHealthIndex(finalSavings, initialSavings, years) {
      // Financial health calculation based on multiple factors
      let healthScore = 50; // Base score
      
      // Factor 1: Growth rate
      if (finalSavings > 0 && initialSavings > 0) {
        const totalGrowthRate = (finalSavings / initialSavings) - 1;
        const annualizedGrowth = Math.pow(1 + totalGrowthRate, 1/years) - 1;
        
        if (annualizedGrowth >= 0.10) {
          healthScore += 40; // Excellent growth (10%+ annually)
        } else if (annualizedGrowth >= 0.07) {
          healthScore += 30; // Good growth (7-10% annually)
        } else if (annualizedGrowth >= 0.05) {
          healthScore += 20; // Decent growth (5-7% annually)
        } else if (annualizedGrowth >= 0.03) {
          healthScore += 10; // Moderate growth (3-5% annually)
        } else if (annualizedGrowth >= 0) {
          healthScore += 5; // Low positive growth
        } else if (annualizedGrowth >= -0.05) {
          healthScore -= 10; // Small decline
        } else if (annualizedGrowth >= -0.10) {
          healthScore -= 20; // Moderate decline
        } else {
          healthScore -= 30; // Severe decline
        }
      }
      
      // Factor 2: Final savings amount relative to initial
      const savingsRatio = finalSavings / initialSavings;
      if (savingsRatio >= 2.0) {
        healthScore += 10; // Doubled savings
      } else if (savingsRatio >= 1.5) {
        healthScore += 5; // 50% increase
      } else if (savingsRatio < 0.5) {
        healthScore -= 15; // Lost more than half
      }
      
      // Factor 3: Absolute savings level
      if (finalSavings <= 0) {
        healthScore = Math.min(healthScore, 15); // Cap at very poor if broke
      } else if (finalSavings < initialSavings * 0.25) {
        healthScore -= 10; // Very low savings remaining
      }
      
      // Factor 4: Sustainability (check if there are negative savings in any year)
      let hadNegativeSavings = false;
      for (let year = 1; year <= years; year++) {
        if (yearlyData[year] && yearlyData[year].endingSavings < 0) {
          hadNegativeSavings = true;
          break;
        }
      }
      
      if (hadNegativeSavings) {
        healthScore -= 20; // Penalty for going into debt
      }
      
      return Math.max(0, Math.min(healthScore, 100));
    }

    // Enable the target containers to accept dropped elements
    document.body.addEventListener('dragover', (e) => {
      e.preventDefault();
    });

    document.body.addEventListener('drop', (e) => {
      e.preventDefault();
      
      // Check if we're removing an item
      const itemId = e.dataTransfer.getData('id');
      const year = e.dataTransfer.getData('year');
      
      if (itemId && year) {
        // Check if dropped outside of timeline (to remove)
        const targetIsTimeline = e.target.closest('.timeline-container');
        const targetIsYearBlock = e.target.closest('.year-block');
        
        if (!targetIsTimeline || !targetIsYearBlock) {
          // Remove the item
          removeItem(year, itemId);
        }
      }
    });

    // Event listeners for input changes
    savingsInput.addEventListener("change", generateTimeline);
    yearsInput.addEventListener("change", generateTimeline);
    incomeInput.addEventListener("change", generateTimeline);
    savingsInput.addEventListener("input", generateTimeline);
    yearsInput.addEventListener("input", generateTimeline);
    incomeInput.addEventListener("input", generateTimeline);

    // Initialize timeline when page loads
    generateTimeline();
  </script>
</body>
</html>
