<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TIA Operator Interface</title>
    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#667eea">
    <link rel="apple-touch-icon" href="/icons/icon-192x192.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        
        .operator-header {
            background: #2196F3;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        #chatTabs {
            list-style: none;
            padding: 0;
            margin: 0 0 20px 0;
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
        }
        
        .chat-tab {
            background: #e0e0e0;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            border: 2px solid transparent;
            transition: all 0.3s;
        }
        
        .chat-tab:hover {
            background: #d0d0d0;
        }
        
        .chat-tab.selected {
            background: #2196F3;
            color: white;
            border-color: #1976D2;
        }
        
        #chatWindows {
            background: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            height: 400px;
            overflow-y: auto;
            padding: 10px;
            margin-bottom: 20px;
        }
        
        .chat-window {
            display: none;
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        .chat-window li {
            margin: 8px 0;
            padding: 8px 12px;
            border-radius: 8px;
            max-width: 80%;
        }
        
        .customer-message {
            background: #e3f2fd;
            margin-right: auto;
        }
        
        .customer-message.agent-response {
            background: #f1f8e9;
            font-style: italic;
        }
        
        .operator-message {
            background: #fff3e0;
            margin-left: auto;
            text-align: right;
        }
        
        .operator-error {
            background: #ffebee;
            color: #c62828;
            margin: 10px 0;
            padding: 8px 12px;
            border-radius: 5px;
            border-left: 4px solid #c62828;
        }
        
        form {
            display: flex;
            gap: 10px;
            background: white;
            padding: 15px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }
        
        .chat-input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            outline: none;
        }
        
        .chat-input:focus {
            border-color: #2196F3;
        }
        
        button {
            padding: 10px 20px;
            background: #2196F3;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s;
        }
        
        button:hover {
            background: #1976D2;
        }
        
        .no-customers {
            text-align: center;
            color: #666;
            padding: 40px;
            font-style: italic;
        }
        
        .status-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            background: #4CAF50;
            border-radius: 50%;
            margin-right: 5px;
        }
        
        .status-indicator.disconnected {
            background: #f44336;
        }
    </style>
</head>
<body>
    <div class="operator-header">
        <h1>TIA Operator Interface</h1>
        <div>Logged in as: <strong><%= username %></strong></div>
    </div>
    
    <div id="customerTabs">
        <ul id="chatTabs"></ul>
    </div>
    
    <div id="chatWindows">
        <div class="no-customers">No customers connected yet...</div>
    </div>
    
    <form>
        <input id="m" class="chat-input" autocomplete="off" placeholder="Type a message..." />
        <button type="submit">Send</button>
    </form>

    <script src="/socket.io/socket.io.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script>
        $(function () {
            var socket = io('/tia_operator');
            var connectedCustomers = {};
            var currentTab;
            
            var messageObject = function(customerId, utterance) {
                return { customerId: customerId, utterance: utterance };
            };
            
            $('form').submit(function(e){
                e.preventDefault();
                
                if(!currentTab) {
                    alert('Please select a customer to send a message to');
                    return false;
                }
                
                if(currentTab && currentTab.disconnected) {
                    alert('This customer has disconnected');
                    return false;
                }
                
                var messageText = $('#m').val().trim();
                if(messageText === '') {
                    return false;
                }
                
                socket.emit('operator message', messageObject(currentTab.customerId, messageText));
                $('#m').val('');
                return false;
            });

            var setCurrentTab = function(target) {
                if(currentTab === target) return;
                currentTab = target;
                $('li.chat-tab').removeClass('selected');
                target.tab.addClass('selected');
                $('.chat-window').hide();
                $('.no-customers').hide();
                target.window.show();
            };

            var createNewCustomerTab = function(customerId) {
                var newChatElements = { customerId: customerId };
                
                newChatElements.tab = $('<li class="chat-tab">')
                    .html('<span class="status-indicator"></span>' + customerId)
                    .click(function() { setCurrentTab(newChatElements); });
                    
                newChatElements.window = $('<ul class="chat-window">').hide();
                newChatElements.window.append($('<li class="customer-message">').text('--- Customer connected ---'));
                
                connectedCustomers[customerId] = newChatElements;
                
                if(!currentTab) {
                    setCurrentTab(newChatElements);
                }
                
                $('#chatTabs').append(newChatElements.tab);
                $('#chatWindows').append(newChatElements.window);
                $('.no-customers').hide();
            };

            var notifyOperatorRequest = function(customerId) {
                if(connectedCustomers[customerId]) {
                    setCurrentTab(connectedCustomers[customerId]);
                    alert('Customer ' + customerId + ' has requested operator assistance!');
                    // Add visual indication
                    connectedCustomers[customerId].window.append(
                        $('<li class="operator-message" style="background: #ffcdd2; color: #c62828;">')
                        .text('ðŸš¨ OPERATOR ASSISTANCE REQUESTED ðŸš¨')
                    );
                }
            };

            var notifyCustomerDisconnected = function(customerId) {
                if(connectedCustomers[customerId]) {
                    connectedCustomers[customerId].disconnected = true;
                    connectedCustomers[customerId].tab.find('.status-indicator').addClass('disconnected');
                    connectedCustomers[customerId].window.append(
                        $('<li class="customer-message" style="background: #ffcdd2;">')
                        .text('--- Customer disconnected ---')
                    );
                }
            };

            var notifySystemError = function(error) {
                var errorText = (error.type === 'CustomerModeError') ? 
                    error.message : 
                    error.type + ' - ' + error.message;
                    
                if(currentTab) {
                    currentTab.window.append($('<li class="operator-error">').text(errorText));
                } else {
                    alert('System Error: ' + errorText);
                }
            };

            var receivedOperatorMessage = function(msg) {
                var customer = connectedCustomers[msg.customerId];
                if(customer) {
                    customer.window.append($('<li class="operator-message">').text('You: ' + msg.utterance));
                    // Auto scroll to bottom
                    customer.window.scrollTop(customer.window[0].scrollHeight);
                }
            };

            var receivedCustomerMessage = function(msg) {
                if(connectedCustomers[msg.customerId]) {
                    var prefix = msg.isAgentResponse ? 'Agent: ' : 'Customer: ';
                    var messageElement = $('<li class="customer-message">')
                        .toggleClass('agent-response', msg.isAgentResponse)
                        .text(prefix + msg.utterance);
                    
                    connectedCustomers[msg.customerId].window.append(messageElement);
                    
                    // Auto scroll to bottom
                    var windowElement = connectedCustomers[msg.customerId].window;
                    windowElement.scrollTop(windowElement[0].scrollHeight);
                }
            };

            // Socket event handlers
            socket.on('customer connected', createNewCustomerTab);
            socket.on('customer message', receivedCustomerMessage);
            socket.on('operator requested', notifyOperatorRequest);
            socket.on('operator message', receivedOperatorMessage);
            socket.on('customer disconnected', notifyCustomerDisconnected);
            socket.on('system error', notifySystemError);
            
            // Connection status
            socket.on('connect', function() {
                console.log('Connected to operator interface');
            });
            
            socket.on('disconnect', function() {
                console.log('Disconnected from operator interface');
            });
        });
    </script>
</body>
</html>
