<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Policy Upselling Recommendations</title>
    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#667eea">
    <link rel="apple-touch-icon" href="/icons/icon-192x192.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(90deg, #6733c6, #f757a7);
            min-height: 100vh;
            overflow-x: hidden;
        }

        /* ===== HEADER STYLES ===== */
        .header {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
            transition: all 0.3s ease;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: 700;
            color: white;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .user-section {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .welcome-text {
            color: white;
            font-weight: 600;
            font-size: 1.1rem;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
        }

        .logout-btn {
            background: rgba(255, 255, 255, 0.15);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.25);
            padding: 0.6rem 1.2rem;
            border-radius: 25px;
            text-decoration: none;
            font-weight: 500;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .logout-btn:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        /* ===== MAIN CONTAINER ===== */
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
            min-height: calc(100vh - 100px);
        }

        .container h1 {
            color: white;
            font-size: 2.5rem;
            font-weight: 700;
            text-align: center;
            margin-bottom: 2rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        /* ===== PROFILE AND POLICY SECTIONS ===== */
        #userProfileSection,
        #acceptedPolicySection {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        #userProfileSection h3,
        #acceptedPolicySection h3 {
            color: white;
            font-size: 1.4rem;
            font-weight: 600;
            margin-bottom: 1rem;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
        }

        .profile-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
        }

        .profile-item {
            background: rgba(255, 255, 255, 0.1);
            padding: 0.75rem;
            border-radius: 10px;
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
        }

        .profile-item:hover {
            background: rgba(255, 255, 255, 0.15);
            transform: translateY(-1px);
        }

        .accepted-policy {
            color: white;
            line-height: 1.6;
        }

        .accepted-policy p {
            margin-bottom: 0.5rem;
        }

        /* ===== LOADING AND ERROR STATES ===== */
        #loadingState {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 2rem;
            text-align: center;
            color: white;
            font-size: 1.1rem;
            margin: 2rem 0;
        }

        .error-message {
            background: rgba(244, 67, 54, 0.9);
            border: 2px solid #f44336;
            border-radius: 15px;
            padding: 2rem;
            text-align: center;
            color: white;
            box-shadow: 0 10px 30px rgba(244, 67, 54, 0.3);
        }

        .error-message h3 {
            margin-bottom: 1rem;
            font-size: 1.5rem;
        }

        .error-message button {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 25px;
            font-weight: 600;
            cursor: pointer;
            margin-top: 1rem;
            transition: all 0.3s ease;
        }

        .error-message button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }

        /* ===== RECOMMENDATIONS SECTION ===== */
        #recommendationsSection {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            margin-bottom: 2rem;
        }

        #recommendationsSection h2 {
            color: white;
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
        }

        /* ===== TABLE STYLES ===== */
        .table-wrapper {
            width: 100%;
            overflow-x: auto;
            margin-bottom: 2rem;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        #recommendationsTable {
            width: 100%;
            min-width: 600px;
            border-collapse: collapse;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            overflow: hidden;
        }

        #recommendationsTable thead {
            background: rgba(255, 255, 255, 0.2);
        }

        #recommendationsTable th {
            padding: 1rem;
            text-align: left;
            color: white;
            font-weight: 600;
            font-size: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        #recommendationsTable td {
            padding: 1rem;
            color: white;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            transition: background 0.3s ease;
        }

        #recommendationsTable tbody tr:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        /* ===== BUTTON STYLES ===== */
        .btn-details,
        .btn-select {
            padding: 0.5rem 1rem;
            margin: 0.25rem;
            border: none;
            border-radius: 20px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }

        .btn-details {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .btn-details:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-1px);
        }

        .btn-select {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        }

        .btn-select:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
            background: linear-gradient(135deg, #45a049, #3d8b40);
        }

        /* ===== TOP POLICIES SECTION ===== */
        #topPoliciesSection {
            margin-top: 2rem;
        }

        #topPoliciesSection h3 {
            color: white;
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
        }

        .top-policies-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .policy-card {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 15px;
            padding: 1.5rem;
            transition: all 0.3s ease;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .policy-card:hover {
            background: rgba(255, 255, 255, 0.15);
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
        }

        .policy-card h4 {
            color: white;
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .policy-card p {
            color: rgba(255, 255, 255, 0.9);
            line-height: 1.5;
            margin-bottom: 1rem;
        }

        .policy-actions {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        /* ===== MODAL STYLES ===== */
        .modal {
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            margin: 5% auto;
            padding: 2rem;
            border-radius: 20px;
            width: 80%;
            max-width: 600px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
            position: relative;
            animation: modalSlideIn 0.3s ease;
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            position: absolute;
            right: 1rem;
            top: 1rem;
        }

        .close:hover,
        .close:focus {
            color: #000;
        }

        #modalTitle {
            color: #333;
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .policy-list {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .policy-item {
            background: rgba(0, 0, 0, 0.05);
            padding: 1rem;
            border-radius: 10px;
            border: 1px solid rgba(0, 0, 0, 0.1);
        }

        .policy-item h4 {
            color: #333;
            margin-bottom: 0.5rem;
        }

        .policy-item p {
            color: #666;
            line-height: 1.5;
        }

        /* ===== SUCCESS MESSAGE ===== */
        .success-message {
            background: rgba(76, 175, 80, 0.9);
            border: 2px solid #4CAF50;
            border-radius: 15px;
            padding: 2rem;
            text-align: center;
            color: white;
            box-shadow: 0 10px 30px rgba(76, 175, 80, 0.3);
            backdrop-filter: blur(10px);
        }

        .success-message h3 {
            margin-bottom: 1rem;
            font-size: 1.5rem;
        }

        .success-message button {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 25px;
            font-weight: 600;
            cursor: pointer;
            margin-top: 1rem;
            transition: all 0.3s ease;
        }

        .success-message button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }

        /* ===== RESPONSIVE DESIGN ===== */
        @media (max-width: 1200px) {
            .container {
                padding: 1.5rem;
            }
            
            .top-policies-grid {
                grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            }
        }

        @media (max-width: 768px) {
            .header-content {
                padding: 0 1rem;
                flex-direction: column;
                gap: 1rem;
            }
            
            .container {
                padding: 1rem;
            }
            
            .container h1 {
                font-size: 2rem;
            }
            
            .profile-grid {
                grid-template-columns: 1fr;
            }
            
            #recommendationsTable {
                font-size: 0.9rem;
            }
            
            #recommendationsTable th,
            #recommendationsTable td {
                padding: 0.75rem 0.5rem;
            }
            
            .top-policies-grid {
                grid-template-columns: 1fr;
            }
            
            .policy-actions {
                justify-content: center;
            }
            
            .modal-content {
                width: 95%;
                margin: 10% auto;
                padding: 1.5rem;
            }
            
            .user-section {
                gap: 0.5rem;
                flex-wrap: wrap;
                justify-content: center;
            }
            
            .welcome-text {
                font-size: 1rem;
            }
        }

        @media (max-width: 480px) {
            .container h1 {
                font-size: 1.5rem;
            }
            
            #userProfileSection,
            #acceptedPolicySection,
            #recommendationsSection {
                padding: 1rem;
            }
            
            .btn-details,
            .btn-select {
                font-size: 0.8rem;
                padding: 0.4rem 0.8rem;
            }
            
            .policy-card {
                padding: 1rem;
            }
            
            #recommendationsTable {
                font-size: 0.8rem;
            }
            
            .modal-content {
                padding: 1rem;
            }
        }
    </style>
</head>
    <body>
        <header class="header">
            <div class="header-content">
                <div class="logo">
                    <i class="fas fa-chart-line"></i>
                    Financial AI Hub
                </div>
                <div class="user-section">
                    <span class="welcome-text">Welcome!</span>
                    <a href="/home" class="logout-btn">
                        <i class="fas fa-home"></i> Home
                    </a>
                    <a href="/logout" class="logout-btn">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </a>
                </div>
            </div>
        </header>
        
        <div class="container">
            <h1>Policy Upselling Recommendations</h1>
            
            <!-- User Profile Information -->
            <div id="userProfileSection">
                <h3>Customer Profile</h3>
                <div id="userProfile"></div>
            </div>
            
            <!-- Accepted Policy Display -->
            <div id="acceptedPolicySection">
                <h3>Previously Selected Policy</h3>
                <div id="acceptedPolicy"></div>
            </div>
            
            <!-- Loading State -->
            <div id="loadingState">
                <p>Generating personalized upselling recommendations...</p>
            </div>
            
            <!-- Error State -->
            <div id="errorState" style="display: none;">
                <div class="error-message">
                    <h3>Error</h3>
                    <p id="errorMessage"></p>
                    <button onclick="loadRecommendations()">Retry</button>
                </div>
            </div>
            
            <!-- Recommendations Section -->
            <div id="recommendationsSection" style="display: none;">
                <h2>All Upsell Recommendations (Ranked by Confidence)</h2>
                
                <div class="table-wrapper">
                    <table id="recommendationsTable">
                        <thead>
                            <tr>
                                <th>RANK</th>
                                <th>RECOMMENDATION</th>
                                <th>CONFIDENCE</th>
                                <th>ACTION</th>
                            </tr>
                        </thead>
                        <tbody id="recommendationsBody">
                        </tbody>
                    </table>
                </div>
                
                <!-- Top 3 Policies Section -->
                <div id="topPoliciesSection">
                    <h3>Top 3 Recommended Policies</h3>
                    <div id="topPolicies"></div>
                </div>
            </div>
            
            <!-- Policy Details Modal -->
            <div id="policyModal" class="modal" style="display: none;">
                <div class="modal-content">
                    <span class="close" onclick="closePolicyModal()">&times;</span>
                    <h3 id="modalTitle"></h3>
                    <div id="modalContent"></div>
                </div>
            </div>
            
            <!-- Success Message -->
            <div id="successMessage" style="display: none;">
                <div class="success-message">
                    <h3>Policy Selected Successfully!</h3>
                    <p id="successText"></p>
                    <button onclick="goToHome()">Home</button>
                </div>
            </div>
        </div>

        <script>
            // Global variables
            let recommendations = [];
            let userProfileData = null;
            let acceptedPolicy = '';

            // Load recommendations when page loads
            document.addEventListener('DOMContentLoaded', function() {
                loadRecommendations();
            });

            // Function to load upselling recommendations
            async function loadRecommendations() {
                try {
                    showLoading();
                    hideError();
                    hideRecommendations();
                    
                    const response = await fetch('/api/upselling-recommendations', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({})
                    });
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    
                    const data = await response.json();
                    
                    if (!data.success) {
                        throw new Error(data.error || 'Failed to load recommendations');
                    }
                    
                    // Store data globally
                    recommendations = data.upselling_recommendations || [];
                    userProfileData = data.customer_data;
                    acceptedPolicy = data.acceptedPolicy || 'Unknown Policy';
                    
                    // Display the data
                    displayUserProfile();
                    displayAcceptedPolicy();
                    displayRecommendations();
                    
                    hideLoading();
                    showRecommendations();
                    
                } catch (error) {
                    console.error('Error loading recommendations:', error);
                    hideLoading();
                    showError(error.message);
                }
            }

            // Function to display user profile
            function displayUserProfile() {
                const profileDiv = document.getElementById('userProfile');
                if (!userProfileData) {
                    profileDiv.innerHTML = '<p>No profile data available</p>';
                    return;
                }
                
                profileDiv.innerHTML = `
                    <div class="profile-grid">
                        <div class="profile-item"><strong>Age:</strong> ${userProfileData.Age}</div>
                        <div class="profile-item"><strong>Gender:</strong> ${userProfileData.Gender}</div>
                        <div class="profile-item"><strong>Geography:</strong> ${userProfileData.Geography}</div>
                        <div class="profile-item"><strong>Credit Score:</strong> ${userProfileData.CreditScore}</div>
                        <div class="profile-item"><strong>Estimated Salary:</strong> ₹${Number(userProfileData.EstimatedSalary).toLocaleString()}</div>
                        <div class="profile-item"><strong>Account Balance:</strong> ₹${Number(userProfileData.Balance).toLocaleString()}</div>
                        <div class="profile-item"><strong>Tenure:</strong> ${userProfileData.Tenure} years</div>
                        <div class="profile-item"><strong>Products Count:</strong> ${userProfileData.NumOfProducts}</div>
                        <div class="profile-item"><strong>Has Credit Card:</strong> ${userProfileData.HasCrCard}</div>
                        <div class="profile-item"><strong>Active Member:</strong> ${userProfileData.IsActiveMember}</div>
                    </div>
                `;
            }

            // Function to display accepted policy
            function displayAcceptedPolicy() {
                const policyDiv = document.getElementById('acceptedPolicy');
                policyDiv.innerHTML = `
                    <div class="accepted-policy">
                        <p><strong>Selected Policy:</strong> ${acceptedPolicy}</p>
                        <p><em>Based on your profile and selected policy, here are additional recommendations:</em></p>
                    </div>
                `;
            }

            // Function to display recommendations
            function displayRecommendations() {
                const tbody = document.getElementById('recommendationsBody');
                tbody.innerHTML = '';
                
                if (!recommendations || recommendations.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="4">No recommendations available</td></tr>';
                    return;
                }
                
                recommendations.forEach((rec, index) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${index + 1}</td>
                        <td>${rec.recommendation}</td>
                        <td>${rec.confidence}</td>
                        <td>
                            <button onclick="viewPolicyDetails(${rec.category_id})" class="btn-details">
                                View Details
                            </button>
                            <button onclick="selectPolicy(${rec.category_id}, '${rec.recommendation}')" class="btn-select">
                                Select
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
                
                // Display top 3 recommendations
                displayTopPolicies();
            }

            // Function to display top 3 policies
            function displayTopPolicies() {
                const topPoliciesDiv = document.getElementById('topPolicies');
                const top3 = recommendations.slice(0, 3);
                
                if (top3.length === 0) {
                    topPoliciesDiv.innerHTML = '<p>No top recommendations available</p>';
                    return;
                }
                
                let html = '<div class="top-policies-grid">';
                top3.forEach((rec, index) => {
                    html += `
                        <div class="policy-card">
                            <h4>Recommendation ${index + 1}</h4>
                            <p>${rec.recommendation}</p>
                            <p><strong>Confidence: ${rec.confidence}</strong></p>
                            <div class="policy-actions">
                                <button onclick="viewPolicyDetails(${rec.category_id})" class="btn-details">
                                    View Details
                                </button>
                                <button onclick="selectPolicy(${rec.category_id}, '${rec.recommendation}')" class="btn-select">
                                    Select This
                                </button>
                            </div>
                        </div>
                    `;
                });
                html += '</div>';
                
                topPoliciesDiv.innerHTML = html;
            }

            // Function to view policy details
            async function viewPolicyDetails(categoryId) {
                try {
                    const response = await fetch(`/api/policy-details/${categoryId}`);
                    const data = await response.json();
                    
                    if (data.success) {
                        showPolicyModal(data.categoryName, data.policies);
                    } else {
                        alert('Failed to load policy details');
                    }
                } catch (error) {
                    console.error('Error loading policy details:', error);
                    alert('Error loading policy details');
                }
            }

            // Function to show policy modal
            function showPolicyModal(title, policies) {
                const modal = document.getElementById('policyModal');
                const modalTitle = document.getElementById('modalTitle');
                const modalContent = document.getElementById('modalContent');
                
                modalTitle.textContent = title;
                
                let content = '<div class="policy-list">';
                policies.forEach(policy => {
                    content += `
                        <div class="policy-item">
                            <h4>${policy.name}</h4>
                            <p>${policy.description}</p>
                        </div>
                    `;
                });
                content += '</div>';
                
                modalContent.innerHTML = content;
                modal.style.display = 'block';
            }

            // Function to close policy modal
            function closePolicyModal() {
                document.getElementById('policyModal').style.display = 'none';
            }

            // Function to select a policy
            async function selectPolicy(categoryId, policyName) {
                try {
                    const response = await fetch('/api/select-upselling-policy', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            policy: policyName,
                            categoryId: categoryId
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        showSuccess(data.message);
                    } else {
                        alert(data.error || 'Failed to select policy');
                    }
                } catch (error) {
                    console.error('Error selecting policy:', error);
                    alert('Error selecting policy');
                }
            }

            // Function to show success message
            function showSuccess(message) {
                document.getElementById('successText').textContent = message;
                document.getElementById('successMessage').style.display = 'block';
                document.getElementById('recommendationsSection').style.display = 'none';
            }

            // Function to go to home
            function goToHome() {
                window.location.href = '/home';
            }

            // Utility functions for showing/hiding sections
            function showLoading() {
                document.getElementById('loadingState').style.display = 'block';
            }

            function hideLoading() {
                document.getElementById('loadingState').style.display = 'none';
            }

            function showError(message) {
                document.getElementById('errorMessage').textContent = message;
                document.getElementById('errorState').style.display = 'block';
            }

            function hideError() {
                document.getElementById('errorState').style.display = 'none';
            }

            function showRecommendations() {
                document.getElementById('recommendationsSection').style.display = 'block';
            }

            function hideRecommendations() {
                document.getElementById('recommendationsSection').style.display = 'none';
            }

            // Close modal when clicking outside of it
            window.onclick = function(event) {
                const modal = document.getElementById('policyModal');
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            }
        </script>
    </body>
</html>
