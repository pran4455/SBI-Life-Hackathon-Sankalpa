<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Policy Upselling Recommendations</title>
    <style>
        /* Policy Upselling Recommendations CSS */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
            font-size: 2.5rem;
            font-weight: 700;
        }

        h2 {
            color: #34495e;
            margin-bottom: 20px;
            font-size: 1.8rem;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }

        h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.4rem;
        }

        h4 {
            color: #34495e;
            margin-bottom: 10px;
            font-size: 1.2rem;
        }

        /* User Profile Section */
        #userProfileSection {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 25px;
        }

        .profile-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }

        .profile-item {
            background: #f8f9fa;
            padding: 12px;
            border-radius: 8px;
            border-left: 4px solid #3498db;
        }

        .profile-item strong {
            color: #2c3e50;
        }

        /* Accepted Policy Section */
        #acceptedPolicySection {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 25px;
        }

        .accepted-policy {
            background: #e8f5e8;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #27ae60;
        }

        .accepted-policy p {
            margin-bottom: 8px;
        }

        .accepted-policy em {
            color: #555;
        }

        /* Loading State */
        #loadingState {
            text-align: center;
            padding: 40px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 25px;
        }

        #loadingState p {
            font-size: 1.2rem;
            color: #3498db;
        }

        /* Error State */
        #errorState {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 25px;
        }

        .error-message {
            background: #fee;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #e74c3c;
            text-align: center;
        }

        .error-message h3 {
            color: #e74c3c;
            margin-bottom: 10px;
        }

        .error-message p {
            color: #721c24;
            margin-bottom: 15px;
        }

        .error-message button {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
        }

        .error-message button:hover {
            background: #c0392b;
        }

        /* Recommendations Section */
        #recommendationsSection {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 25px;
        }

        /* Recommendations Table */
        #recommendationsTable {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 30px;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        #recommendationsTable thead {
            background: #3498db;
            color: white;
        }

        #recommendationsTable th,
        #recommendationsTable td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        #recommendationsTable th {
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.9rem;
            letter-spacing: 0.5px;
        }

        #recommendationsTable tbody tr:hover {
            background-color: #f8f9fa;
        }

        #recommendationsTable tbody tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        /* Buttons */
        .btn-details,
        .btn-select {
            padding: 8px 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9rem;
            margin-right: 8px;
            transition: all 0.3s ease;
        }

        .btn-details {
            background: #17a2b8;
            color: white;
        }

        .btn-details:hover {
            background: #138496;
            transform: translateY(-1px);
        }

        .btn-select {
            background: #28a745;
            color: white;
        }

        .btn-select:hover {
            background: #218838;
            transform: translateY(-1px);
        }

        /* Top Policies Section */
        #topPoliciesSection {
            margin-top: 30px;
        }

        .top-policies-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .policy-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            border: 1px solid #e9ecef;
            transition: all 0.3s ease;
            position: relative;
        }

        .policy-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        }

        .policy-card h4 {
            color: #2c3e50;
            margin-bottom: 12px;
            font-size: 1.1rem;
        }

        .policy-card p {
            margin-bottom: 12px;
            color: #555;
        }

        .policy-card strong {
            color: #3498db;
        }

        .policy-actions {
            margin-top: 15px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        /* Modal Styles */
        .modal {
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 30px;
            border: none;
            border-radius: 15px;
            width: 80%;
            max-width: 700px;
            max-height: 80vh;
            overflow-y: auto;
            position: relative;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            position: absolute;
            top: 15px;
            right: 25px;
            cursor: pointer;
        }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
        }

        .policy-list {
            margin-top: 20px;
        }

        .policy-item {
            background: #f8f9fa;
            padding: 20px;
            margin-bottom: 15px;
            border-radius: 8px;
            border-left: 4px solid #3498db;
        }

        .policy-item h4 {
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .policy-item p {
            color: #555;
            line-height: 1.6;
        }

        /* Success Message */
        #successMessage {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .success-message {
            background: #d4edda;
            padding: 25px;
            border-radius: 10px;
            border-left: 4px solid #28a745;
        }

        .success-message h3 {
            color: #155724;
            margin-bottom: 15px;
        }

        .success-message p {
            color: #155724;
            margin-bottom: 20px;
            font-size: 1.1rem;
        }

        .success-message button {
            background: #28a745;
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .success-message button:hover {
            background: #218838;
            transform: translateY(-2px);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            h2 {
                font-size: 1.5rem;
            }
            
            .profile-grid {
                grid-template-columns: 1fr;
            }
            
            .top-policies-grid {
                grid-template-columns: 1fr;
            }
            
            #recommendationsTable {
                font-size: 0.9rem;
            }
            
            #recommendationsTable th,
            #recommendationsTable td {
                padding: 10px 8px;
            }
            
            .modal-content {
                width: 95%;
                margin: 10% auto;
                padding: 20px;
            }
            
            .policy-actions {
                flex-direction: column;
            }
            
            .btn-details,
            .btn-select {
                width: 100%;
                margin-right: 0;
                margin-bottom: 5px;
            }
        }

        @media (max-width: 480px) {
            h1 {
                font-size: 1.8rem;
            }
            
            #recommendationsTable {
                font-size: 0.8rem;
            }
            
            #recommendationsTable th,
            #recommendationsTable td {
                padding: 8px 6px;
            }
            
            .btn-details,
            .btn-select {
                padding: 6px 12px;
                font-size: 0.8rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Policy Upselling Recommendations</h1>
        
        <!-- User Profile Information -->
        <div id="userProfileSection">
            <h3>Customer Profile</h3>
            <div id="userProfile"></div>
        </div>
        
        <!-- Accepted Policy Display -->
        <div id="acceptedPolicySection">
            <h3>Previously Selected Policy</h3>
            <div id="acceptedPolicy"></div>
        </div>
        
        <!-- Loading State -->
        <div id="loadingState">
            <p>Generating personalized upselling recommendations...</p>
        </div>
        
        <!-- Error State -->
        <div id="errorState" style="display: none;">
            <div class="error-message">
                <h3>Error</h3>
                <p id="errorMessage"></p>
                <button onclick="loadRecommendations()">Retry</button>
            </div>
        </div>
        
        <!-- Recommendations Section -->
        <div id="recommendationsSection" style="display: none;">
            <h2>All Upsell Recommendations (Ranked by Confidence)</h2>
            
            <table id="recommendationsTable">
                <thead>
                    <tr>
                        <th>RANK</th>
                        <th>RECOMMENDATION</th>
                        <th>CONFIDENCE</th>
                        <th>ACTION</th>
                    </tr>
                </thead>
                <tbody id="recommendationsBody">
                </tbody>
            </table>
            
            <!-- Top 3 Policies Section -->
            <div id="topPoliciesSection">
                <h3>Top 3 Recommended Policies</h3>
                <div id="topPolicies"></div>
            </div>
        </div>
        
        <!-- Policy Details Modal -->
        <div id="policyModal" class="modal" style="display: none;">
            <div class="modal-content">
                <span class="close" onclick="closePolicyModal()">&times;</span>
                <h3 id="modalTitle"></h3>
                <div id="modalContent"></div>
            </div>
        </div>
        
        <!-- Success Message -->
        <div id="successMessage" style="display: none;">
            <div class="success-message">
                <h3>Policy Selected Successfully!</h3>
                <p id="successText"></p>
                <button onclick="goToHome()">Home</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let recommendations = [];
        let userProfileData = null;
        let acceptedPolicy = '';

        // Load recommendations when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadRecommendations();
        });

        // Function to load upselling recommendations
        async function loadRecommendations() {
            try {
                showLoading();
                hideError();
                hideRecommendations();
                
                const response = await fetch('/api/upselling-recommendations', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({})
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.error || 'Failed to load recommendations');
                }
                
                // Store data globally
                recommendations = data.upselling_recommendations || [];
                userProfileData = data.customer_data;
                acceptedPolicy = data.acceptedPolicy || 'Unknown Policy';
                
                // Display the data
                displayUserProfile();
                displayAcceptedPolicy();
                displayRecommendations();
                
                hideLoading();
                showRecommendations();
                
            } catch (error) {
                console.error('Error loading recommendations:', error);
                hideLoading();
                showError(error.message);
            }
        }

        // Function to display user profile
        function displayUserProfile() {
            const profileDiv = document.getElementById('userProfile');
            if (!userProfileData) {
                profileDiv.innerHTML = '<p>No profile data available</p>';
                return;
            }
            
            profileDiv.innerHTML = `
                <div class="profile-grid">
                    <div class="profile-item"><strong>Age:</strong> ${userProfileData.Age}</div>
                    <div class="profile-item"><strong>Gender:</strong> ${userProfileData.Gender}</div>
                    <div class="profile-item"><strong>Geography:</strong> ${userProfileData.Geography}</div>
                    <div class="profile-item"><strong>Credit Score:</strong> ${userProfileData.CreditScore}</div>
                    <div class="profile-item"><strong>Estimated Salary:</strong> ₹${Number(userProfileData.EstimatedSalary).toLocaleString()}</div>
                    <div class="profile-item"><strong>Account Balance:</strong> ₹${Number(userProfileData.Balance).toLocaleString()}</div>
                    <div class="profile-item"><strong>Tenure:</strong> ${userProfileData.Tenure} years</div>
                    <div class="profile-item"><strong>Products Count:</strong> ${userProfileData.NumOfProducts}</div>
                    <div class="profile-item"><strong>Has Credit Card:</strong> ${userProfileData.HasCrCard}</div>
                    <div class="profile-item"><strong>Active Member:</strong> ${userProfileData.IsActiveMember}</div>
                </div>
            `;
        }

        // Function to display accepted policy
        function displayAcceptedPolicy() {
            const policyDiv = document.getElementById('acceptedPolicy');
            policyDiv.innerHTML = `
                <div class="accepted-policy">
                    <p><strong>Selected Policy:</strong> ${acceptedPolicy}</p>
                    <p><em>Based on your profile and selected policy, here are additional recommendations:</em></p>
                </div>
            `;
        }

        // Function to display recommendations
        function displayRecommendations() {
            const tbody = document.getElementById('recommendationsBody');
            tbody.innerHTML = '';
            
            if (!recommendations || recommendations.length === 0) {
                tbody.innerHTML = '<tr><td colspan="4">No recommendations available</td></tr>';
                return;
            }
            
            recommendations.forEach((rec, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${rec.recommendation}</td>
                    <td>${rec.confidence}</td>
                    <td>
                        <button onclick="viewPolicyDetails(${rec.category_id})" class="btn-details">
                            View Details
                        </button>
                        <button onclick="selectPolicy(${rec.category_id}, '${rec.recommendation}')" class="btn-select">
                            Select
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
            
            // Display top 3 recommendations
            displayTopPolicies();
        }

        // Function to display top 3 policies
        function displayTopPolicies() {
            const topPoliciesDiv = document.getElementById('topPolicies');
            const top3 = recommendations.slice(0, 3);
            
            if (top3.length === 0) {
                topPoliciesDiv.innerHTML = '<p>No top recommendations available</p>';
                return;
            }
            
            let html = '<div class="top-policies-grid">';
            top3.forEach((rec, index) => {
                html += `
                    <div class="policy-card">
                        <h4>Recommendation ${index + 1}</h4>
                        <p>${rec.recommendation}</p>
                        <p><strong>Confidence: ${rec.confidence}</strong></p>
                        <div class="policy-actions">
                            <button onclick="viewPolicyDetails(${rec.category_id})" class="btn-details">
                                View Details
                            </button>
                            <button onclick="selectPolicy(${rec.category_id}, '${rec.recommendation}')" class="btn-select">
                                Select This
                            </button>
                        </div>
                    </div>
                `;
            });
            html += '</div>';
            
            topPoliciesDiv.innerHTML = html;
        }

        // Function to view policy details
        async function viewPolicyDetails(categoryId) {
            try {
                const response = await fetch(`/api/policy-details/${categoryId}`);
                const data = await response.json();
                
                if (data.success) {
                    showPolicyModal(data.categoryName, data.policies);
                } else {
                    alert('Failed to load policy details');
                }
            } catch (error) {
                console.error('Error loading policy details:', error);
                alert('Error loading policy details');
            }
        }

        // Function to show policy modal
        function showPolicyModal(title, policies) {
            const modal = document.getElementById('policyModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalContent = document.getElementById('modalContent');
            
            modalTitle.textContent = title;
            
            let content = '<div class="policy-list">';
            policies.forEach(policy => {
                content += `
                    <div class="policy-item">
                        <h4>${policy.name}</h4>
                        <p>${policy.description}</p>
                    </div>
                `;
            });
            content += '</div>';
            
            modalContent.innerHTML = content;
            modal.style.display = 'block';
        }

        // Function to close policy modal
        function closePolicyModal() {
            document.getElementById('policyModal').style.display = 'none';
        }

        // Function to select a policy
        async function selectPolicy(categoryId, policyName) {
            try {
                const response = await fetch('/api/select-upselling-policy', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        policy: policyName,
                        categoryId: categoryId
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showSuccess(data.message);
                } else {
                    alert(data.error || 'Failed to select policy');
                }
            } catch (error) {
                console.error('Error selecting policy:', error);
                alert('Error selecting policy');
            }
        }

        // Function to show success message
        function showSuccess(message) {
            document.getElementById('successText').textContent = message;
            document.getElementById('successMessage').style.display = 'block';
            document.getElementById('recommendationsSection').style.display = 'none';
        }

        // Function to go to home
        function goToHome() {
            window.location.href = '/home';
        }

        // Utility functions for showing/hiding sections
        function showLoading() {
            document.getElementById('loadingState').style.display = 'block';
        }

        function hideLoading() {
            document.getElementById('loadingState').style.display = 'none';
        }

        function showError(message) {
            document.getElementById('errorMessage').textContent = message;
            document.getElementById('errorState').style.display = 'block';
        }

        function hideError() {
            document.getElementById('errorState').style.display = 'none';
        }

        function showRecommendations() {
            document.getElementById('recommendationsSection').style.display = 'block';
        }

        function hideRecommendations() {
            document.getElementById('recommendationsSection').style.display = 'none';
        }

        // Close modal when clicking outside of it
        window.onclick = function(event) {
            const modal = document.getElementById('policyModal');
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        }
    </script>
</body>
</html>
